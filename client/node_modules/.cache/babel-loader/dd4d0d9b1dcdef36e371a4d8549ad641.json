{"ast":null,"code":"import _classCallCheck from \"D:\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\RazzlersGithub\\\\client\\\\src\\\\pages\\\\PlayVideo.js\";\nimport React from \"react\";\nimport '../style.css';\n\nvar PlayVideo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlayVideo, _React$Component);\n\n  function PlayVideo(props) {\n    var _this;\n\n    _classCallCheck(this, PlayVideo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlayVideo).call(this, props));\n    _this.state = {\n      isMovie: false,\n      id: 0,\n      name: \"\",\n      description: \"\",\n      rating: 0,\n      actors: \"\",\n      release_year: 0\n    };\n    checkParams().then(function (json) {\n      _this.setState({\n        isMovie: json.isMovie,\n        id: json.id,\n        name: \"\",\n        description: \"\",\n        rating: 0,\n        actors: \"\",\n        release_year: 0\n      });\n\n      var isMovie = json.isMovie;\n      var id = json.id;\n      var set = {};\n      getVideoInfo(isMovie, id).then(function (result) {\n        set = result;\n\n        if (set.hasOwnProperty(\"result\")) {\n          // result from server didnt pull the correct file and it doesnt exist!\n          console.log(\"file doesnt exist!\");\n        } else {\n          // parse good response into constants for current state\n          // {title, desc, rate, act, year};\n          _this.setState({\n            isMovie: json.isMovie,\n            id: json.id,\n            name: set.title,\n            description: set.desc,\n            rating: set.rate,\n            actors: set.act,\n            release_year: set.year\n          });\n        }\n      });\n    });\n    return _this;\n  }\n\n  _createClass(PlayVideo, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isMovie = _this$state.isMovie,\n          id = _this$state.id,\n          name = _this$state.name;\n      var loc = \"\";\n      var isSubscribed = false;\n\n      if (id !== 0) {\n        if (isMovie === \"true\") {\n          var movieList = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Movies\"));\n\n          if (movieList !== null) {\n            if (typeof movieList !== typeof 0) {\n              isSubscribed = movieList.includes(parseInt(id, 10));\n              loc = \"//assets.razzlers.me/assets/videos/movies/\" + id + \".mp4\";\n            }\n          }\n        } else {\n          var showList = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Shows\"));\n\n          if (showList !== null) {\n            isSubscribed = showList.includes(parseInt(id, 10));\n            loc = \"//assets.razzlers.me/assets/videos/episodes/\" + id + \".mp4\";\n          }\n        }\n      }\n\n      console.log(isSubscribed);\n      return React.createElement(\"div\", {\n        hidden: !isSubscribed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"centerText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"font\", {\n        color: \"white\",\n        size: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, name)), React.createElement(\"video\", {\n        className: \"center\",\n        width: \"720\",\n        height: \"480\",\n        controls: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        src: loc,\n        type: \"video/mp4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return PlayVideo;\n}(React.Component); //<p className=\"quarterLeft\"><button className= \"button\">Previous Episode</button></p>\n\n/*function subscribe(isMovie, id)\r\n{\r\n  return new Promise(function(resolve, reject)\r\n  {\r\n    // resolves with object in format {result: true|false} which comes directly from server\r\n    var username = window.localStorage.getItem(\"Razzlers_Username\");\r\n    var data = '{\"username\": \"' + username + '\", \"isMovie\": \"' + isMovie + '\", \"id\": \"' + id + '\"}';\r\n    data = JSON.parse(data);\r\n    var transport = {\r\n      headers: {\r\n        'Content-Type': \"application/json\"\r\n      },\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data)\r\n    };\r\n    const url = \"//razzlers.me:3001/api/getData/subscribeToShow\";\r\n    fetch(url, transport).then(result => result.json()).then(json =>\r\n    {\r\n      utilFunc.updateLocalSubscribedLists().then(output =>\r\n      {\r\n        resolve(json);\r\n      });\r\n    }).catch(err => {\r\n      throw new Error(err);\r\n    });\r\n  });\r\n}*/\n// checks the params in the URL\n\n\nfunction checkParams() {\n  return new Promise(function (resolve, reject) {\n    var url = window.location.href;\n    url = new URL(url);\n    var isMovie = url.searchParams.get(\"isMovie\");\n    var id = url.searchParams.get(\"id\");\n    resolve({\n      isMovie: isMovie,\n      id: id\n    });\n  });\n}\n\nfunction getVideoInfo(isMovie, id) {\n  return new Promise(function (resolve, reject) {\n    var data = '{\"isMovie\": \"' + isMovie + '\", \"id\": \"' + id + '\"}';\n    data = JSON.parse(data);\n    var transport = {\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      method: \"PUT\",\n      body: JSON.stringify(data)\n    };\n    var url = \"//razzlers.me:3001/api/getData/getVideoInfo\";\n    fetch(url, transport).then(function (result) {\n      return result.json();\n    }).then(function (json) {\n      resolve(json);\n    }).catch(function (err) {\n      throw new Error(err);\n    });\n  });\n}\n\nexport default PlayVideo;","map":{"version":3,"sources":["D:\\RazzlersGithub\\client\\src\\pages\\PlayVideo.js"],"names":["React","PlayVideo","props","state","isMovie","id","name","description","rating","actors","release_year","checkParams","then","json","setState","set","getVideoInfo","result","hasOwnProperty","console","log","title","desc","rate","act","year","loc","isSubscribed","movieList","JSON","parse","localStorage","getItem","includes","parseInt","showList","Component","Promise","resolve","reject","url","window","location","href","URL","searchParams","get","data","transport","headers","method","body","stringify","fetch","catch","err","Error"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport '../style.css';\r\n\r\nclass PlayVideo extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isMovie: false,\r\n      id: 0,\r\n      name: \"\",\r\n      description: \"\",\r\n      rating: 0,\r\n      actors: \"\",\r\n      release_year: 0\r\n    };\r\n    checkParams().then(json => {\r\n      this.setState({\r\n        isMovie: json.isMovie,\r\n        id: json.id,\r\n        name: \"\",\r\n        description: \"\",\r\n        rating: 0,\r\n        actors: \"\",\r\n        release_year: 0\r\n      });\r\n      var isMovie = json.isMovie;\r\n      var id = json.id;\r\n      var set = {};\r\n      getVideoInfo(isMovie, id).then(result => {\r\n        set = result;\r\n        if (set.hasOwnProperty(\"result\")) {\r\n          // result from server didnt pull the correct file and it doesnt exist!\r\n          console.log(\"file doesnt exist!\");\r\n        } else {\r\n          // parse good response into constants for current state\r\n          // {title, desc, rate, act, year};\r\n          this.setState({\r\n            isMovie: json.isMovie,\r\n            id: json.id,\r\n            name: set.title,\r\n            description: set.desc,\r\n            rating: set.rate,\r\n            actors: set.act,\r\n            release_year: set.year\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const {isMovie, id, name} = this.state;\r\n    var loc = \"\";\r\n    var isSubscribed = false;\r\n\r\n    if (id !== 0) {\r\n      if (isMovie === \"true\") {\r\n        var movieList = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Movies\"));\r\n        if (movieList !== null) {\r\n          if (typeof movieList !== typeof 0) {\r\n            isSubscribed = movieList.includes(parseInt(id, 10));\r\n            loc = \"//assets.razzlers.me/assets/videos/movies/\" + id + \".mp4\";\r\n          }\r\n        }\r\n      } else {\r\n        var showList = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Shows\"));\r\n        if (showList !== null) {\r\n          isSubscribed = showList.includes(parseInt(id, 10));\r\n          loc = \"//assets.razzlers.me/assets/videos/episodes/\" + id + \".mp4\";\r\n        }\r\n      }\r\n    }\r\n    console.log(isSubscribed);\r\n    return (\r\n      <div hidden={!isSubscribed}>\r\n        <h2 className=\"centerText\">\r\n          <font color=\"white\" size=\"50\">\r\n            {name}\r\n          </font>\r\n        </h2>\r\n        <video className=\"center\" width=\"720\" height=\"480\" controls=\"controls\">\r\n          <source src={loc} type=\"video/mp4\"/>\r\n        </video>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//<p className=\"quarterLeft\"><button className= \"button\">Previous Episode</button></p>\r\n\r\n/*function subscribe(isMovie, id)\r\n{\r\n  return new Promise(function(resolve, reject)\r\n  {\r\n    // resolves with object in format {result: true|false} which comes directly from server\r\n    var username = window.localStorage.getItem(\"Razzlers_Username\");\r\n    var data = '{\"username\": \"' + username + '\", \"isMovie\": \"' + isMovie + '\", \"id\": \"' + id + '\"}';\r\n    data = JSON.parse(data);\r\n    var transport = {\r\n      headers: {\r\n        'Content-Type': \"application/json\"\r\n      },\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data)\r\n    };\r\n    const url = \"//razzlers.me:3001/api/getData/subscribeToShow\";\r\n    fetch(url, transport).then(result => result.json()).then(json =>\r\n    {\r\n      utilFunc.updateLocalSubscribedLists().then(output =>\r\n      {\r\n        resolve(json);\r\n      });\r\n    }).catch(err => {\r\n      throw new Error(err);\r\n    });\r\n  });\r\n}*/\r\n\r\n// checks the params in the URL\r\nfunction checkParams() {\r\n  return new Promise(function(resolve, reject) {\r\n    var url = window.location.href;\r\n    url = new URL(url);\r\n    var isMovie = url.searchParams.get(\"isMovie\");\r\n    var id = url.searchParams.get(\"id\");\r\n    resolve({isMovie, id});\r\n  });\r\n}\r\nfunction getVideoInfo(isMovie, id) {\r\n  return new Promise(function(resolve, reject) {\r\n    var data = '{\"isMovie\": \"' + isMovie + '\", \"id\": \"' + id + '\"}';\r\n    data = JSON.parse(data);\r\n    var transport = {\r\n      headers: {\r\n        'Content-Type': \"application/json\"\r\n      },\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data)\r\n    };\r\n    const url = \"//razzlers.me:3001/api/getData/getVideoInfo\";\r\n    fetch(url, transport).then(result => result.json()).then(json => {\r\n      resolve(json);\r\n    }).catch(err => {\r\n      throw new Error(err);\r\n    });\r\n  });\r\n}\r\n\r\nexport default PlayVideo\r\n"]},"metadata":{},"sourceType":"module"}
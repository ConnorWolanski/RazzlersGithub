{"ast":null,"code":"import _classCallCheck from \"D:\\\\RazParent\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\RazParent\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\RazParent\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\RazParent\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\RazParent\\\\RazzlersGithub\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\RazParent\\\\RazzlersGithub\\\\client\\\\src\\\\pages\\\\PlayVideo.js\";\nimport React from \"react\";\nimport '../style.css';\n\nvar PlayVideo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlayVideo, _React$Component);\n\n  function PlayVideo(props) {\n    var _this;\n\n    _classCallCheck(this, PlayVideo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlayVideo).call(this, props));\n    _this.state = {\n      isMovie: false,\n      id: 0,\n      name: \"\",\n      description: \"\",\n      rating: 0,\n      actors: \"\",\n      release_year: 0\n    };\n    checkParams().then(function (json) {\n      _this.setState({\n        isMovie: json.isMovie,\n        id: json.id,\n        name: \"\",\n        description: \"\",\n        rating: 0,\n        actors: \"\",\n        release_year: 0\n      });\n\n      var isMovie = json.isMovie;\n      var id = json.id;\n      var set = {};\n      getVideoInfo(isMovie, id).then(function (result) {\n        set = result;\n\n        if (set.hasOwnProperty(\"result\")) {\n          // result from server didnt pull the correct file and it doesnt exist!\n          console.log(\"file doesnt exist!\");\n        } else {\n          // parse good response into constants for current state\n          // {title, desc, rate, act, year};\n          _this.setState({\n            isMovie: json.isMovie,\n            id: json.id,\n            name: set.title,\n            description: set.desc,\n            rating: set.rate,\n            actors: set.act,\n            release_year: set.year\n          });\n        }\n      });\n    });\n    return _this;\n  }\n\n  _createClass(PlayVideo, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isMovie = _this$state.isMovie,\n          id = _this$state.id,\n          name = _this$state.name,\n          description = _this$state.description,\n          rating = _this$state.rating,\n          actors = _this$state.actors,\n          release_year = _this$state.release_year;\n      var loc = \"\";\n      var isSubscribed = false;\n      /*console.log(id);\r\n      console.log(JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Shows\")));\r\n      console.log(localStorage.getItem(\"Razzlers_Subscribed_Shows\"));\r\n      console.log(parseInt(id, 10) ===);\r\n      console.log(typeof JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Movies\"))[0]);*/\n\n      if (isMovie === \"true\") {\n        isSubscribed = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Movies\")).includes(parseInt(id, 10));\n        loc = \"//assets.razzlers.me/assets/videos/movies/\" + id + \".mp4\";\n      } else {\n        isSubscribed = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Shows\")).includes(parseInt(id, 10));\n        loc = \"//assets.razzlers.me/assets/videos/episodes/\" + id + \".mp4\";\n      }\n\n      if (!isSubscribed) {\n        // is NOT subscribed\n        if (isMovie === \"true\") {\n          loc = \"//assets.razzlers.me/assets/thumbnails/movieThumbnails/\" + id + \".jpg\";\n        } else {\n          loc = \"//assets.razzlers.me/assets/thumbnails/showThumbnails/\" + id + \".jpg\";\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          className: \"centerText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(\"font\", {\n          color: \"white\",\n          size: \"50\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \" \", name, \" \")), React.createElement(\"p\", {\n          className: \"centerText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"font\", {\n          color: \"white\",\n          size: \"20px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, \"(\" + release_year + \") \" + rating + \"/10, \" + description + \"\\n\" + actors)), React.createElement(\"img\", {\n          className: \"center\",\n          src: loc,\n          alt: \"background\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"centerText\",\n          hidden: isSubscribed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"font\", {\n          color: \"white\",\n          size: \"50\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Subscribe to Watch Video\")), React.createElement(\"p\", {\n          className: \"centerText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(\"font\", {\n          hidden: true,\n          id: \"invalidMessage1\",\n          className: \"error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"Subscription Failed, please try again!\")), React.createElement(\"button\", {\n          hidden: isSubscribed,\n          className: \"subButton\",\n          onClick: subscribe(isMovie, id).then(function (result) {\n            // result is either true or false based on if subbing went correctly or note\n            if (result.value === \"true\") {\n              // refresh page so they can watch the subbed show/movie\n              window.location.reload();\n            } else {// subbing failed\n              // display error message!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n              //document.getElementById(\"invalidMessage1\").hidden=false;\n            }\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"Subscribe\"));\n      } else {\n        // is subscribed\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          className: \"centerText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"font\", {\n          color: \"white\",\n          size: \"50\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, \" \", name, \" \")), React.createElement(\"video\", {\n          className: \"center\",\n          width: \"720\",\n          height: \"480\",\n          controls: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"source\", {\n          src: loc,\n          type: \"video/mp4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          className: \"centerText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"font\", {\n          color: \"white\",\n          size: \"20px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"(\" + release_year + \") \" + rating + \"/10, \" + description + \"\\n\" + actors)));\n      }\n    }\n  }]);\n\n  return PlayVideo;\n}(React.Component); //<p className=\"quarterLeft\"><button className= \"button\">Previous Episode</button></p>\n\n\nfunction subscribe(isMovie, id) {\n  return new Promise(function (resolve, reject) {\n    // resolves with object in format {result: true|false} which comes directly from server\n    resolve({\n      result: false\n    });\n  });\n} // checks the params in the URL\n\n\nfunction checkParams() {\n  return new Promise(function (resolve, reject) {\n    var url = window.location.href;\n    url = new URL(url);\n    var isMovie = url.searchParams.get(\"isMovie\");\n    var id = url.searchParams.get(\"id\");\n    resolve({\n      isMovie: isMovie,\n      id: id\n    });\n  });\n}\n\nfunction getVideoInfo(isMovie, id) {\n  return new Promise(function (resolve, reject) {\n    var data = '{\"isMovie\": \"' + isMovie + '\", \"id\": \"' + id + '\"}';\n    data = JSON.parse(data);\n    var transport = {\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      method: \"PUT\",\n      body: JSON.stringify(data)\n    };\n    var url = \"http://localhost:3001/api/getData/getVideoInfo\";\n    fetch(url, transport).then(function (result) {\n      return result.json();\n    }).then(function (json) {\n      resolve(json);\n    }).catch(function (err) {\n      throw new Error(err);\n    });\n  });\n}\n\nexport default PlayVideo;","map":{"version":3,"sources":["D:\\RazParent\\RazzlersGithub\\client\\src\\pages\\PlayVideo.js"],"names":["React","PlayVideo","props","state","isMovie","id","name","description","rating","actors","release_year","checkParams","then","json","setState","set","getVideoInfo","result","hasOwnProperty","console","log","title","desc","rate","act","year","loc","isSubscribed","JSON","parse","localStorage","getItem","includes","parseInt","subscribe","value","window","location","reload","Component","Promise","resolve","reject","url","href","URL","searchParams","get","data","transport","headers","method","body","stringify","fetch","catch","err","Error"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport '../style.css';\r\n\r\nclass PlayVideo extends React.Component {\r\n  constructor(props)\r\n  {\r\n    super(props)\r\n    this.state = {\r\n      isMovie: false,\r\n      id: 0,\r\n      name: \"\",\r\n      description: \"\",\r\n      rating: 0,\r\n      actors: \"\",\r\n      release_year: 0\r\n    };\r\n    checkParams().then(json => {\r\n      this.setState({\r\n        isMovie: json.isMovie,\r\n        id: json.id,\r\n        name: \"\",\r\n        description: \"\",\r\n        rating: 0,\r\n        actors: \"\",\r\n        release_year: 0\r\n      });\r\n      var isMovie = json.isMovie;\r\n      var id = json.id;\r\n      var set = {};\r\n      getVideoInfo(isMovie, id).then(result => {\r\n        set = result;\r\n        if(set.hasOwnProperty(\"result\"))\r\n        {\r\n          // result from server didnt pull the correct file and it doesnt exist!\r\n          console.log(\"file doesnt exist!\");\r\n        } else {\r\n          // parse good response into constants for current state\r\n          // {title, desc, rate, act, year};\r\n          this.setState({\r\n            isMovie: json.isMovie,\r\n            id: json.id,\r\n            name: set.title,\r\n            description: set.desc,\r\n            rating: set.rate,\r\n            actors: set.act,\r\n            release_year: set.year\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const {isMovie, id, name, description, rating, actors, release_year} = this.state;\r\n    var loc = \"\";\r\n    var isSubscribed = false;\r\n    /*console.log(id);\r\n    console.log(JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Shows\")));\r\n    console.log(localStorage.getItem(\"Razzlers_Subscribed_Shows\"));\r\n    console.log(parseInt(id, 10) ===);\r\n    console.log(typeof JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Movies\"))[0]);*/\r\n    if(isMovie === \"true\")\r\n    {\r\n      isSubscribed = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Movies\")).includes(parseInt(id,10));\r\n      loc = \"//assets.razzlers.me/assets/videos/movies/\" + id + \".mp4\";\r\n    } else {\r\n      isSubscribed = JSON.parse(localStorage.getItem(\"Razzlers_Subscribed_Shows\")).includes(parseInt(id,10));\r\n      loc = \"//assets.razzlers.me/assets/videos/episodes/\" + id + \".mp4\";\r\n    }\r\n    if(!isSubscribed)\r\n    {\r\n      // is NOT subscribed\r\n      if(isMovie === \"true\"){\r\n        loc = \"//assets.razzlers.me/assets/thumbnails/movieThumbnails/\" + id + \".jpg\";\r\n      }else{\r\n        loc = \"//assets.razzlers.me/assets/thumbnails/showThumbnails/\" + id + \".jpg\";\r\n      }\r\n      return (\r\n        <div>\r\n          <h2 className=\"centerText\"><font  color = \"white\" size = \"50\"> {name} </font></h2>\r\n          <p className=\"centerText\"><font  color =\"white\" size = \"20px\">{\"(\" + release_year + \") \" + rating + \"/10, \" + description + \"\\n\" + actors}</font></p>\r\n          <img className=\"center\" src={loc} alt=\"background\"/>\r\n          <p className=\"centerText\" hidden = {isSubscribed}><font color = \"white\" size = \"50\">Subscribe to Watch Video</font></p>\r\n          <p className=\"centerText\">\r\n            <font hidden id=\"invalidMessage1\" className=\"error\">Subscription Failed, please try again!</font>\r\n          </p>\r\n          <button hidden = {isSubscribed} className=\"subButton\" onClick =\r\n            {\r\n              subscribe(isMovie, id).then(result =>\r\n              {\r\n                // result is either true or false based on if subbing went correctly or note\r\n                if(result.value === \"true\")\r\n                {\r\n                  // refresh page so they can watch the subbed show/movie\r\n                  window.location.reload();\r\n                } else {\r\n                  // subbing failed\r\n                  // display error message!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n                  //document.getElementById(\"invalidMessage1\").hidden=false;\r\n                }\r\n              })\r\n            }>Subscribe</button>\r\n        </div>\r\n      );\r\n    } else {\r\n      // is subscribed\r\n      return (\r\n        <div>\r\n          <h2 className=\"centerText\"><font  color = \"white\" size = \"50\"> {name} </font></h2>\r\n          <video className=\"center\" width=\"720\" height=\"480\"   controls>\r\n            <source src={loc} type=\"video/mp4\"/>\r\n          </video>\r\n          <p className=\"centerText\"><font  color =\"white\" size = \"20px\">{\"(\" + release_year + \") \" + rating + \"/10, \" + description + \"\\n\" + actors}</font></p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n  //<p className=\"quarterLeft\"><button className= \"button\">Previous Episode</button></p>\r\n\r\nfunction subscribe(isMovie, id)\r\n{\r\n  return new Promise(function(resolve, reject)\r\n  {\r\n    // resolves with object in format {result: true|false} which comes directly from server\r\n    resolve({result: false});\r\n  });\r\n}\r\n\r\n// checks the params in the URL\r\nfunction checkParams()\r\n{\r\n  return new Promise(function(resolve, reject)\r\n  {\r\n    var url = window.location.href;\r\n    url = new URL(url);\r\n    var isMovie = url.searchParams.get(\"isMovie\");\r\n    var id = url.searchParams.get(\"id\");\r\n    resolve({isMovie, id});\r\n  });\r\n}\r\nfunction getVideoInfo(isMovie, id)\r\n{\r\n  return new Promise(function(resolve, reject)\r\n  {\r\n    var data = '{\"isMovie\": \"' + isMovie + '\", \"id\": \"' + id + '\"}';\r\n    data = JSON.parse(data);\r\n    var transport = {\r\n      headers: {\r\n        'Content-Type': \"application/json\"\r\n      },\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data)\r\n    };\r\n    const url = \"http://localhost:3001/api/getData/getVideoInfo\";\r\n    fetch(url, transport).then(result => result.json()).then(json => {\r\n      resolve(json);\r\n    }).catch(err => {\r\n      throw new Error(err);\r\n    });\r\n  });\r\n}\r\n\r\nexport default PlayVideo\r\n"]},"metadata":{},"sourceType":"module"}